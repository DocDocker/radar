
Перем ТаблицаОшибок;
Перем Типы;

Перем ИменаНСтр;
Перем НедопустимыеСимволыКода;
Перем Алфавиты;

// TODO: проверять наличие всех языков

Процедура Открыть(Парсер, Параметры) Экспорт
	
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	Типы = Парсер.Типы();
	
	ИменаНСтр = Новый Структура;
	ИменаНСтр.Вставить("НСтр");
	ИменаНСтр.Вставить("NStr");
	
	НедопустимыеСимволыКода = "#*|\:""<>?/=";
	
	Алфавиты = Новый Структура;
	Алфавиты.Вставить("en", " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
	Алфавиты.Вставить("ru", " абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ");
	
КонецПроцедуры

Функция Закрыть() Экспорт
	Возврат Неопределено;
КонецФункции

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьВыражениеИдентификатор");
	Возврат Подписки;
КонецФункции

#Область РеализацияПодписок

Процедура ПосетитьВыражениеИдентификатор(ВыражениеИдентификатор) Экспорт
	Если ИменаНСтр.Свойство(ВыражениеИдентификатор.Голова.Имя)
		И ВыражениеИдентификатор.Аргументы <> Неопределено
		И ВыражениеИдентификатор.Аргументы.Количество() > 0 Тогда
		ПервыйАргумент = ВыражениеИдентификатор.Аргументы[0];
		Если ПервыйАргумент = Неопределено Или ПервыйАргумент.Тип <> Типы.ВыражениеСтроковое Тогда
			Ошибка("Первым аргументом должна быть простая строка", ВыражениеИдентификатор.Начало, ВыражениеИдентификатор.Начало);
		Иначе
			РазобратьМультиязычнуюСтроку(ПервыйАргумент);
		КонецЕсли; 
	КонецЕсли;  
КонецПроцедуры

#КонецОбласти // РеализацияПодписок

Функция РазобратьМультиязычнуюСтроку(ВыражениеСтроковое)
	
	СписокСтрок = Новый Массив;
	Для Каждого Элемент Из ВыражениеСтроковое.Элементы Цикл
		СписокСтрок.Добавить(Элемент.Значение);
	КонецЦикла; 
	ИсходнаяСтрока = СтрСоединить(СписокСтрок);
	
	Индекс = 0;
	Символ = ";";
	
	СинтаксисКорректен = Истина;
	
	Пока Символ = ";" Цикл
		
		Индекс = Индекс + 1;
		Символ = Сред(ИсходнаяСтрока, Индекс, 1);
		
		Начало = Индекс;
		
		Пока СтрНайти(НедопустимыеСимволыКода, Символ) = 0 Цикл
			Индекс = Индекс + 1;
			Символ = Сред(ИсходнаяСтрока, Индекс, 1);
		КонецЦикла; 
		
		Если Символ <> "=" Тогда
			Ошибка("Ошибка формата строки", ВыражениеСтроковое.Начало, ВыражениеСтроковое.Конец);
			СинтаксисКорректен = Ложь;
			Прервать;
		КонецЕсли; 
		
		КодЯзыка = СокрЛП(Сред(ИсходнаяСтрока, Начало, Индекс - Начало));
		
		Алфавит = Неопределено;
		Алфавиты.Свойство(КодЯзыка, Алфавит);
	
		Индекс = Индекс + 1;
		Символ = Сред(ИсходнаяСтрока, Индекс, 1);
		Пока ПустаяСтрока(Символ) И Символ <> "" Цикл
			Индекс = Индекс + 1;
			Символ = Сред(ИсходнаяСтрока, Индекс, 1);
		КонецЦикла; 
		
		Начало = Индекс;
		
		Если Символ <> "'" Тогда
			Ошибка("Ошибка формата строки", ВыражениеСтроковое.Начало, ВыражениеСтроковое.Конец);
			СинтаксисКорректен = Ложь;
			Прервать;
		КонецЕсли;
		
		КоличествоСимволовИзАлфавита = 0;
		
		Пока Символ = "'" Цикл
			Индекс = Индекс + 1;
			Символ = Сред(ИсходнаяСтрока, Индекс, 1);
			Пока Символ <> "'" И Символ <> "" Цикл
				Индекс = Индекс + 1;
				Символ = Сред(ИсходнаяСтрока, Индекс, 1);
				Если Алфавит <> Неопределено И СтрНайти(Алфавит, Символ) > 0 Тогда
					КоличествоСимволовИзАлфавита = КоличествоСимволовИзАлфавита + 1;
				КонецЕсли; 
			КонецЦикла;
			Если Символ = "" Тогда
				Символ = Неопределено;
			Иначе
				Индекс = Индекс + 1;
				Символ = Сред(ИсходнаяСтрока, Индекс, 1);
			КонецЕсли;
		КонецЦикла; 
		
		Если Символ = Неопределено Тогда
			Ошибка("Ошибка формата строки", ВыражениеСтроковое.Начало, ВыражениеСтроковое.Конец);
			СинтаксисКорректен = Ложь;
			Прервать;
		КонецЕсли; 
		
		Если Алфавит <> Неопределено И КоличествоСимволовИзАлфавита < (Индекс - Начало) / 4 Тогда
			Ошибка(СтрШаблон("Возможно язык строки не соответствует коду языка '%1'", КодЯзыка), ВыражениеСтроковое.Начало, ВыражениеСтроковое.Конец);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецФункции

Процедура Ошибка(Текст, Начало, Конец = Неопределено, ЕстьЗамена = Ложь)
	
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = Метаданные().Имя;
	Ошибка.Текст = Текст;
	
	Ошибка.МинутНаИсправление = 5;
	Ошибка.Серьезность = "INFO";
	Ошибка.Приоритет = 0;
	Ошибка.Правило = Метаданные().Синоним;
	Ошибка.Тип = "CODE_SMELL";
	
	Ошибка.ПозицияНачала = Начало.Позиция;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если Конец = Неопределено Или Конец = Начало Тогда
		Ошибка.ПозицияКонца = Начало.Позиция + Начало.Длина;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Длина;
	Иначе
		Ошибка.ПозицияКонца = Конец.Позиция + Конец.Длина;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Длина;
	КонецЕсли;
	
	Ошибка.ЕстьЗамена = ЕстьЗамена;
	
КонецПроцедуры
