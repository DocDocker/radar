
// Поиск запросов в циклах.
// Отслеживаются следующие случаи:
// 1. Выполнение запроса, пакета запросов или построителя и выборка в цикле.
// 2. Выполнение запроса, пакета запросов или построителя и выгрузка в цикле.
// 3. Выполнение в цикле метода, который выполняет запрос (в рамках одного модуля).

// Если внутри цикла не происходит выборки или выгрузки, то это считается корректной ситуацией,
// так как такое обычно делается в итерационных алгоритмах на временных таблицах.

Перем Типы;
Перем ТаблицаОшибок;
Перем Стек;
Перем Счетчики;
Перем Исходник;

Перем ИменаМетодовВыполнения;
Перем ИменаМетодовВыборки;
Перем ИменаРезультатовПостроителя;
Перем ПодозрительныеПеременные;
Перем ТекущийМетод;
Перем МетодыВыполняющиеЗапросы;
Перем СоответствиеВложенныхВызовов;
Перем ВложенныеВызовы;
Перем ВызовыВЦикле;

Процедура Открыть(Парсер, Параметры) Экспорт
	
	Типы = Парсер.Типы();
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	Стек = Парсер.Стек();
	Счетчики = Парсер.Счетчики();
	Исходник = Парсер.Исходник();
	
	ИменаМетодовВыполнения = Новый Структура;
	ИменаМетодовВыполнения.Вставить("Выполнить");
	ИменаМетодовВыполнения.Вставить("Execute");
	ИменаМетодовВыполнения.Вставить("ВыполнитьПакет");
	ИменаМетодовВыполнения.Вставить("ExecuteBatch");
	ИменаМетодовВыполнения.Вставить("ВыполнитьПакетСПромежуточнымиДанными");
	ИменаМетодовВыполнения.Вставить("ExecuteBatchWithIntermediateData");
	
	ИменаМетодовВыборки = Новый Структура;
	ИменаМетодовВыборки.Вставить("Выбрать");
	ИменаМетодовВыборки.Вставить("Select");
	ИменаМетодовВыборки.Вставить("Выгрузить");
	ИменаМетодовВыборки.Вставить("Unload");
	ИменаМетодовВыборки.Вставить("Пустой");
	ИменаМетодовВыборки.Вставить("IsEmpty");
	
	ИменаРезультатовПостроителя = Новый Структура;
	ИменаРезультатовПостроителя.Вставить("Результат");
	ИменаРезультатовПостроителя.Вставить("Result");
	
	ПодозрительныеПеременные = Новый Соответствие;
	МетодыВыполняющиеЗапросы = Новый Соответствие;
	СоответствиеВложенныхВызовов = Новый Соответствие;
	ВызовыВЦикле = Новый Массив;
	
КонецПроцедуры

Функция Закрыть() Экспорт
	
	Глубина = 0;
	
	Для Каждого ВыражениеИдентификатор Из ВызовыВЦикле Цикл
		Объявление = ВыражениеИдентификатор.Голова.Объявление;
		Если МетодыВыполняющиеЗапросы[Объявление] <> Неопределено
			Или ВложенныеВызовыВыполняютЗапросы(ВыражениеИдентификатор, Объявление, Глубина) Тогда
			Ошибка("Выполнение метода с запросом в цикле", ВыражениеИдентификатор.Начало, ВыражениеИдентификатор.Конец);
		КонецЕсли;  
	КонецЦикла; 
	
	ПодозрительныеПеременные = Неопределено;
	МетодыВыполняющиеЗапросы = Неопределено;
	СоответствиеВложенныхВызовов = Неопределено;
	ВложенныеВызовы = Неопределено;
	ВызовыВЦикле = Неопределено;
	ТекущийМетод = Неопределено;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВложенныеВызовыВыполняютЗапросы(ВыражениеИдентификатор, РодительскоеОбъявление, Глубина)	
	Результат = Ложь;
	Если Глубина < 3 Тогда
		ВложенныеВызовы = СоответствиеВложенныхВызовов[РодительскоеОбъявление];
		Если ВложенныеВызовы <> Неопределено Тогда 
			Для Каждого Объявление Из ВложенныеВызовы Цикл
				Если МетодыВыполняющиеЗапросы[Объявление] <> Неопределено Тогда
					Результат = Истина;
				Иначе
					Результат = ВложенныеВызовыВыполняютЗапросы(ВыражениеИдентификатор, Объявление, Глубина + 1);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции   

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьОбъявлениеМетода");
	Подписки.Добавить("ПокинутьОбъявлениеМетода");
	Подписки.Добавить("ПосетитьВыражениеИдентификатор");
	Возврат Подписки;
КонецФункции

#Область РеализацияПодписок

Процедура ПосетитьОбъявлениеМетода(ОбъявлениеМетода) Экспорт
	ТекущийМетод = ОбъявлениеМетода.Сигнатура;
	ВложенныеВызовы = Новый Массив;
КонецПроцедуры

Процедура ПокинутьОбъявлениеМетода(ОбъявлениеМетода) Экспорт
	СоответствиеВложенныхВызовов[ТекущийМетод] = ВложенныеВызовы;
КонецПроцедуры

Процедура ПосетитьВыражениеИдентификатор(ВыражениеИдентификатор) Экспорт
	УровеньЦикла = УровеньЦикла(); 
	Голова = ВыражениеИдентификатор.Голова;
	Хвост = ВыражениеИдентификатор.Хвост;
	Родитель = Стек[Стек.ВГраница()];
	Если ВыражениеИдентификатор.Аргументы <> Неопределено Тогда
		Если УровеньЦикла > 0 Тогда
			Если УровеньЦикла > 1 Или Родитель.Тип <> Типы.ОператорДляКаждого Тогда
				ВызовыВЦикле.Добавить(ВыражениеИдентификатор);
			КонецЕсли;
		КонецЕсли;
		ВложенныеВызовы.Добавить(Голова.Объявление);
	КонецЕсли;
	Если Хвост.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИндексВыборки = 1;
	ЭлементХвоста = Хвост[0];
	Если ЭлементХвоста.Тип = Типы.ВыражениеИндекс И Хвост.Количество() > 1 Тогда
		ИндексВыборки = 2;
		ЭлементХвоста = Хвост[1];
	КонецЕсли;
	Если ЭлементХвоста.Тип <> Типы.ВыражениеПоле Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементХвоста.Аргументы <> Неопределено Тогда
		Если ИменаМетодовВыполнения.Свойство(ЭлементХвоста.Имя) Тогда
			Если Родитель.Тип = Типы.ОператорДляКаждого И УровеньЦикла = 1 Тогда
				// пример:
				// Для Каждого Строка Из Запрос.Выполнить().Выгрузить() Цикл
				УровеньЦикла = 0;	
			КонецЕсли; 
			Если ИндексВыборки < Хвост.Количество() Тогда
				СледующийЭлементХвоста = Хвост[ИндексВыборки];
				Если СледующийЭлементХвоста.Тип = Типы.ВыражениеПоле
					И СледующийЭлементХвоста.Аргументы <> Неопределено
					И ИменаМетодовВыборки.Свойство(СледующийЭлементХвоста.Имя) Тогда
					// пример: 
					// Выборка = Запрос.Выполнить().Выбрать();
					Если УровеньЦикла > 0 Тогда
						Ошибка("Выполнение запроса в цикле", ВыражениеИдентификатор.Начало, ВыражениеИдентификатор.Конец);
					КонецЕсли; 
					МетодыВыполняющиеЗапросы[ТекущийМетод] = Истина;
				КонецЕсли; 
			Иначе	
				Если Родитель.Тип = Типы.ОператорПрисваивания
					И Родитель.ЛевыйОперанд.Хвост.Количество() = 0 Тогда
					ПодозрительныеПеременные[Родитель.ЛевыйОперанд.Голова] = УровеньЦикла;
				Иначе
					ПодозрительныеПеременные[Голова] = УровеньЦикла;
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ИменаМетодовВыборки.Свойство(ЭлементХвоста.Имя) Тогда
			УровеньЦиклаПриВыполненииЗапроса = ПодозрительныеПеременные[Голова]; 
			Если УровеньЦиклаПриВыполненииЗапроса <> Неопределено Тогда	
				// пример 1:
				// Результат = Запрос.Выполнить();
				// ...
				// Результат.Выбрать();
				// пример 2:
				// Результаты = Запрос.ВыполнитьПакет();
				// ...
				// Выборка = Результаты[0].Выбрать();
				Если УровеньЦикла > 0 И УровеньЦиклаПриВыполненииЗапроса <> 0 Тогда 
					Ошибка("Выполнение запроса в цикле", ВыражениеИдентификатор.Начало, ВыражениеИдентификатор.Конец);
				КонецЕсли; 
				МетодыВыполняющиеЗапросы[ТекущийМетод] = Истина;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ИменаРезультатовПостроителя.Свойство(ЭлементХвоста.Имя) Тогда
		УровеньЦиклаПриВыполненииЗапроса = ПодозрительныеПеременные[Голова];
		Если УровеньЦиклаПриВыполненииЗапроса <> Неопределено Тогда
			Если Хвост.Количество() > 1 Тогда
				СледующийЭлементХвоста = Хвост[1];
				Если СледующийЭлементХвоста.Тип = Типы.ВыражениеПоле
					И СледующийЭлементХвоста.Аргументы <> Неопределено
					И ИменаМетодовВыборки.Свойство(СледующийЭлементХвоста.Имя) Тогда
					// пример:
					// Построитель.Выполнить();
					// ...
					// Построитель.Результат.Выбрать();
					Если УровеньЦикла > 0 И УровеньЦиклаПриВыполненииЗапроса <> 0 Тогда 
						Ошибка("Выполнение запроса в цикле", ВыражениеИдентификатор.Начало, ВыражениеИдентификатор.Конец);
					КонецЕсли;
					МетодыВыполняющиеЗапросы[ТекущийМетод] = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры

#КонецОбласти

Функция УровеньЦикла()
	Возврат Счетчики[Типы.ОператорПока] + Счетчики[Типы.ОператорДляКаждого] + Счетчики[Типы.ОператорДля];
КонецФункции

Процедура Ошибка(Текст, Начало, Конец = Неопределено, ЕстьЗамена = Ложь)
	
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = Метаданные().Имя;
	Ошибка.Текст = Текст;
	
	Ошибка.МинутНаИсправление = 5;
	Ошибка.Серьезность = "INFO";
	Ошибка.Приоритет = 0;
	Ошибка.Правило = Метаданные().Синоним;
	Ошибка.Тип = "CODE_SMELL";
	
	Ошибка.ПозицияНачала = Начало.Позиция;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если Конец = Неопределено Или Конец = Начало Тогда
		Ошибка.ПозицияКонца = Начало.Позиция + Начало.Длина;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Длина;
	Иначе
		Ошибка.ПозицияКонца = Конец.Позиция + Конец.Длина;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Длина;
	КонецЕсли;
	
	Ошибка.ЕстьЗамена = ЕстьЗамена;
	
КонецПроцедуры