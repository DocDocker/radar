
Процедура РазобратьМодули(ДанныеМодулей, Отчет, Проект, ГлобальныеСвойства, ГлобальныеМетоды) Экспорт
	
	Всего = ДанныеМодулей.Количество();
	
	Если Всего = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	РазмерПартии = Проект.РазмерПартии;
	МаксимумПотоков = Проект.МаксимумПотоков;
	МаксимумЗаданий = Макс(1, Мин(МаксимумПотоков, Цел(Всего / РазмерПартии)));
	СписокЗаданий = Новый Массив(МаксимумЗаданий);
	ПараметрыЗадания = Новый Массив(5);
	ПараметрыЗадания[1] = Отчет;
	ПараметрыЗадания[2] = Проект;
	ПараметрыЗадания[3] = ГлобальныеСвойства;
	ПараметрыЗадания[4] = ГлобальныеМетоды;
	Индекс = 0;
	Обработано = 0;
	Таймаут = 60;
		
	Пока Обработано < Всего Цикл
		Если СписокЗаданий[Индекс] = Неопределено Или СписокЗаданий[Индекс].Состояние <> СостояниеФоновогоЗадания.Активно Тогда 
			Партия = Новый Массив;
			Для Обработано = Обработано По Мин(Обработано + РазмерПартии, Всего - 1) Цикл
				Партия.Добавить(ДанныеМодулей[Обработано]);
			КонецЦикла;
			ПараметрыЗадания[0] = Партия;
			СписокЗаданий[Индекс] = ФоновыеЗадания.Выполнить("Радар_Задания.РазобратьПартиюМодулей", ПараметрыЗадания);
		КонецЕсли;
		Индекс = Индекс + 1;
		Если Индекс = МаксимумЗаданий Тогда 
			СписокЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(СписокЗаданий, Таймаут);
			Индекс = 0;		
		КонецЕсли;	
	КонецЦикла;
		
	Для Каждого Задание Из СписокЗаданий Цикл
		Если Задание <> Неопределено Тогда
			Пока Задание.Состояние = СостояниеФоновогоЗадания.Активно Цикл
				Задание = Задание.ОжидатьЗавершенияВыполнения(Таймаут);	
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура РазобратьПартиюМодулей(Партия, Отчет, Проект, ГлобальныеСвойства, ГлобальныеМетоды) Экспорт
		
	Парсер = Обработки.Радар_ПарсерВстроенногоЯзыка.Создать();
	Парсер.СтрогийРежим = Истина;
	КонструкторГлобальногоОкружения = Обработки.Радар_КонструкторГлобальногоОкружения.Создать();
	ГлобальноеОкружение = КонструкторГлобальногоОкружения.Создать(Парсер);
	КонструкторГлобальногоОкружения = Неопределено;
	
	Плагины = Радар_Кэш.Плагины(Проект);
	
	Проверки = РегистрыСведений.Радар_Проверки.СоздатьНаборЗаписей();
	Проверки.Отбор.Регистратор.Установить(Отчет);
		
	ЗаписиОбОшибках = РегистрыСведений.Радар_Ошибки.СоздатьНаборЗаписей();
	ЗаписиОбОшибках.Отбор.Регистратор.Установить(Отчет);	
		
	Для Каждого ДанныеМодуля Из Партия Цикл
				
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть(ДанныеМодуля.Путь, КодировкаТекста.UTF8);
		Исходник = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
								
		#Область ВнешнееОкружение
		
		Узлы = Парсер.Узлы();
		ВнешнееОкружение = Парсер.Окружение(ГлобальноеОкружение);
		Переменные = ВнешнееОкружение.Переменные;
		Методы = ВнешнееОкружение.Методы;
					
		Для Каждого Имя Из ГлобальныеСвойства Цикл 
			Элемент = Узлы.ЭлементОкружения.Добавить();
			Элемент.Имя = Имя;
			Переменные.Вставить(Имя, Элемент);
		КонецЦикла;
		
		Для Каждого Имя Из ГлобальныеМетоды Цикл 
			Элемент = Узлы.ЭлементОкружения.Добавить();
			Элемент.Имя = Имя;
			Методы.Вставить(Имя, Элемент);
		КонецЦикла;
		
		Если ДанныеМодуля.Свойства <> Неопределено Тогда
			Для Каждого Имя Из ДанныеМодуля.Свойства Цикл 
				Элемент = Узлы.ЭлементОкружения.Добавить();
				Элемент.Имя = Имя;
				Переменные.Вставить(Имя, Элемент);
			КонецЦикла; 
		КонецЕсли; 
		
		Если ДанныеМодуля.Окружение <> Неопределено Тогда
			
			Окружение = Вычислить(СтрШаблон("Радар_Кэш.%1()", ДанныеМодуля.Окружение));
					
			Для Каждого Переменная Из Окружение.Переменные Цикл 
				Элемент = Узлы.ЭлементОкружения.Добавить();
				Элемент.Имя = Переменная.Имя;
				Переменные.Вставить(Переменная.Имя, Элемент);
			КонецЦикла; 
			
			Для Каждого Метод Из Окружение.Методы Цикл 
				Элемент = Узлы.ЭлементОкружения.Добавить();
				Элемент.Имя = Метод.Имя;
				Методы.Вставить(Метод.Имя, Элемент);
			КонецЦикла;
					
		КонецЕсли; 
				
		#КонецОбласти
				
		Проверка = Проверки.Добавить();
		
		Проверка.Регистратор = Отчет;
		Проверка.Проект = Проект;
		Проверка.Модуль = ДанныеМодуля.Ссылка;
		Проверка.Путь = ДанныеМодуля.Путь;
		Проверка.Хэш = ДанныеМодуля.Хэш;
		
		Старт = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Попытка
			Модуль = Парсер.Разобрать(Исходник, ВнешнееОкружение);
			Парсер.Подключить(Плагины);
			Парсер.Посетить(Модуль); 
			Проверка.Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Старт) / 1000; 
			ТаблицаТокенов = Парсер.ТаблицаТокенов();
			Проверка.КоличествоСтрок = ТаблицаТокенов[ТаблицаТокенов.Количество() - 1].НомерСтроки;
		Исключение
			Проверка.Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Старт) / 1000;
			Проверка.ВозниклоИсключение = Истина;
			Проверка.ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		ТаблицаОшибок = Парсер.ТаблицаОшибок();
		
		Проверка.КоличествоОшибок = ТаблицаОшибок.Количество();
		
		Для Каждого Ошибка Из ТаблицаОшибок Цикл
			ЗаписьОбОшибке = ЗаписиОбОшибках.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьОбОшибке, Ошибка);
			ЗаписьОбОшибке.Регистратор = Отчет;
			ЗаписьОбОшибке.Проект = Проект;
			ЗаписьОбОшибке.Модуль = ДанныеМодуля.Ссылка;
			ЗаписьОбОшибке.Ссылка = Новый УникальныйИдентификатор;
		КонецЦикла;
		
		Парсер.Очистить();
		
		Проверка.Период = ТекущаяДатаСеанса();
		
	КонецЦикла;
	
	Проверки.Записать(Ложь);
	ЗаписиОбОшибках.Записать(Ложь);
	
КонецПроцедуры
